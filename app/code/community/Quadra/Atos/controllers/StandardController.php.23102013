<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * @category   Quadra
 * @package    Quadra_Atos
 * @name        Quadra_Atos_StandardController
 * @author      Quadra Team
 */

class Quadra_Atos_StandardController extends Mage_Core_Controller_Front_Action
{	
    /**
     * Get singleton with Atos aurore
     *
     * @return object Quadra_Atos_Model_Standard
     */
    public function getStandard()
    {
        return Mage::getSingleton('atos/method_standard');
    }
	
    public function getConfig()
    {
        return Mage::getSingleton('atos/config');
    }
	
    public function redirectAction()
    {
        $session = Mage::getSingleton('checkout/session');

        if ($session->getQuote()->getHasError()) {
            $this->_redirect('checkout/cart');
        } else {
            if ($session->getLastQuoteId()) {
                $session->setAtosStandardQuoteId($session->getLastQuoteId());
            }

            $this->getResponse()->setBody($this->getLayout()->createBlock('atos/standard_redirect')->toHtml());
        }
    }
	
    public function cancelAction()
    {   
        $model = $this->getStandard();
        $session = Mage::getSingleton('checkout/session');

        if ($response = $model->getApiResponse()->doResponse($this->getData(), array('bin_response' => $model->getBinResponse()))) {            
            $order = Mage::getModel('sales/order');
        
            if ($response['return_context']) {
                $orderIds = explode(',', $response['return_context']);
                foreach ($orderIds as $orderId) {
                    $order->loadByIncrementId($orderId);

                    if (!$status = $model->getConfigData('order_status_payment_canceled')) {
                        $status = $order->getStatus();
                    }

                    if ($order->getId()) {
                        $order->addStatusToHistory(
                                $status, $this->__('Order was canceled by customer')
                        );

                        if ($model->getConfigData('order_status_payment_canceled') == Mage_Sales_Model_Order::STATE_HOLDED && $order->canHold()) {
                            $order->hold();
                        }

                        $order->save();
                    }
                }
                
                if (!$model->getConfigData('empty_cart')) {
                    $this->_reorder($orderIds);
                }
            } else {                
                $order->loadByIncrementId($response['order_id']);

                if (!$status = $model->getConfigData('order_status_payment_canceled')) {
                    $status = $order->getStatus();
                }

                if ($order->getId()) {
                    $order->addStatusToHistory(
                            $status, $this->__('Order was canceled by customer')
                    );

                    if ($model->getConfigData('order_status_payment_canceled') == Mage_Sales_Model_Order::STATE_HOLDED && $order->canHold()) {
                        $order->hold();
                    }

                    $order->save();
                    
                    if (!$model->getConfigData('empty_cart')) {
                        $this->_reorder(array($order->getIncrementId()));
                    }
                }
            }
        }

        if ($model->getConfigData('empty_cart')) {
            $session->setQuoteId($session->getAtosStandardQuoteId(true));
        }
        $session->setCanRedirect(false);
        $session->addNotice($this->__('The payment was canceled.'));

        $this->_redirect('checkout/cart');
    }

    public function normalAction() 
    {
        $model = $this->getStandard();
        $session = Mage::getSingleton('checkout/session');

        /* NO_RESPONSE_PAGE implies GET method for normal_return_url
          if (!$this->getRequest()->isPost('DATA'))
          {
          $this->_redirect('');
          return;
          }
         */

        $response = $model->getApiResponse()->doResponse($this->getData(), array('bin_response' => $model->getBinResponse()));

        if ($response['merchant_id'] != $model->getMerchantId()) {
            Mage::log(sprintf('Response Merchant ID (%s) is not valid with configuration value (%s)' . "\n", $response['merchant_id'], $model->getMerchantId()), null, 'atos');

            $session->addError($this->__('We are sorry but we have an error with payment module'));
            $this->_redirect('checkout/cart');
            return;
        }

        switch ($response['response_code']) {
            case '00':
                $session->setQuoteId($session->getAtosStandardQuoteId(true));
                $session->getQuote()->setIsActive(false)->save();

                if ($response['return_context']) {
                    $orderIds = explode(',', $response['return_context']);

                    foreach ($orderIds as $incrementId) {
                        $order = Mage::getModel('sales/order')->loadByIncrementId($incrementId);
                        $lastOrderIds[$order->getId()] = $incrementId;
                    }

                    Mage::getSingleton('checkout/type_multishipping')
                        ->getCheckoutSession()
                            ->setDisplaySuccess(true);
                    
                    $session->setCanRedirect(false);

                    Mage::getSingleton('core/session')->setOrderIds($lastOrderIds);

                    $this->_redirect('checkout/multishipping/success', array('_secure' => true));
                } else {                   
                    $this->_redirect('checkout/onepage/success', array('_secure' => true));
                }
                break;

            default:
                $session->addError($this->__('(Response Code %s) Error with payment module', $response['response_code']));
                $this->_redirect('checkout/cart');
                break;
        }
    }

    public function automaticAction() 
    {
        $model = $this->getStandard();

        if (!$this->getRequest()->isPost('DATA')) {
            $this->_redirect('');
            return;
        }

        if ($this->getConfig()->getCheckByIpAddress()) {
            if (!in_array($model->getApiParameters()->getIpAddress(), $this->getConfig()->getAuthorizedIps())) {
                Mage::log($model->getApiParameters()->getIpAddress() . ' tries to connect to our server' . "\n", null, 'atos');
                return;
            }
        }

        $response = $model->getApiResponse()->doResponse($_POST['DATA'], array('bin_response' => $model->getBinResponse()));

        if ($response['merchant_id'] != $model->getMerchantId()) {
            Mage::log(sprintf('Response Merchant ID (%s) is not valid with configuration value (%s)' . "\n", $response['merchant_id'], $model->getMerchantId()), null, 'atos');
            return;
        }

        if ($response['return_context']) {
            $orderIds = explode(',', $response['return_context']);
            foreach ($orderIds as $orderId) {
                $order = Mage::getModel('sales/order')->loadByIncrementId($orderId);
                $this->_updateOrderState($order, $response, $model);
            }
        } else {
            $order = Mage::getModel('sales/order')->loadByIncrementId($response['order_id']);
            $this->_updateOrderState($order, $response, $model);
        }
    }

    protected function _updateOrderState($order, $response, $model) {
        switch ($response['response_code']) {
            // Success order
            case '00':
                if ($order->getId()) {
                    if ($order->getState() == Mage_Sales_Model_Order::STATE_HOLDED) {
                        $order->unhold();
                    }

                    if (!$status = $model->getConfigData('order_status_payment_accepted')) {
                        $status = $order->getStatus();
                    }

                    $message = $this->__('Payment accepted by Atos');
                    $message .= ' - ' . Mage::getSingleton('atos/api_response')->describeResponse($response);

                    if ($status == Mage_Sales_Model_Order::STATE_PROCESSING) {
                        $order->setState(
                                Mage_Sales_Model_Order::STATE_PROCESSING, $status, $message
                        );
                    } else if ($status == Mage_Sales_Model_Order::STATE_COMPLETE) {
                        $order->setState(
                                Mage_Sales_Model_Order::STATE_COMPLETE, $status, $message
                        );
                    } else {
                        $order->addStatusToHistory(
                                $status, $message, true
                        );
                    }

                    // Create invoice
                    if ($model->getConfigData('invoice_create')) {
                        $this->saveInvoice($order);
                    }

                    if (!$order->getEmailSent()) {
                        $order->sendNewOrderEmail();
                    }
                }
                break;

            default:
                // Cancel order
                if ($order->getId()) {
                    $messageError = $this->__('Customer was rejected by Atos');
                    $messageError .= ' - ' . Mage::getSingleton('atos/api_response')->describeResponse($response);

                    if ($order->getState() == Mage_Sales_Model_Order::STATE_HOLDED) {
                        $order->unhold();
                    }

                    if (!$status = $model->getConfigData('order_status_payment_refused')) {
                        $status = $order->getStatus();
                    }

                    $order->addStatusToHistory(
                        $status, $messageError
                    );

                    if ($status == Mage_Sales_Model_Order::STATE_HOLDED && $order->canHold()) {
                        $order->hold();
                    }
                }
                break;
        }

        $order->save();
    }
    
    /**
     *  Save invoice for order
     *
     *  @param    Mage_Sales_Model_Order $order
     *  @return	  boolean Can save invoice or not
     */
    protected function saveInvoice(Mage_Sales_Model_Order $order)
    {
        if ($order->canInvoice()) {
            $convertor = Mage::getModel('sales/convert_order');

            $invoice = $convertor->toInvoice($order);

            foreach ($order->getAllItems() as $orderItem) {
                if (!$orderItem->getQtyToInvoice()) {
                    continue;
                }

                $item = $convertor->itemToInvoiceItem($orderItem);
                $item->setQty($orderItem->getQtyToInvoice());
                $invoice->addItem($item);
            }

            $invoice->collectTotals();
            $invoice->register();

            Mage::getModel('core/resource_transaction')
                    ->addObject($invoice)
                    ->addObject($invoice->getOrder())
                    ->save();

            $order->addStatusToHistory(
                    $order->getStatus(), Mage::helper('atos')->__('Invoice %s was created', $invoice->getIncrementId())
            );
        }

        return false;
    }

    protected function getData()
    {
        if ($this->getRequest()->isPost('DATA'))
            return $_POST['DATA'];
        elseif ($this->getRequest()->isGet('DATA'))
            return $_GET['DATA'];
        else return;
    }
    
    protected function _reorder($orderIds)
    {
        $cart = Mage::getSingleton('checkout/cart');
        $cartTruncated = false;
        /* @var $cart Mage_Checkout_Model_Cart */
        
        foreach ($orderIds as $orderId) {
            $order = Mage::getModel('sales/order')->loadByIncrementId($orderId);

            $items = $order->getItemsCollection();
            foreach ($items as $item) {
                try {
                    $cart->addOrderItem($item);
                } catch (Mage_Core_Exception $e){
                    if (Mage::getSingleton('checkout/session')->getUseNotice(true)) {
                        Mage::getSingleton('checkout/session')->addNotice($e->getMessage());
                    }
                    else {
                        Mage::getSingleton('checkout/session')->addError($e->getMessage());
                    }
                } catch (Exception $e) {
                    Mage::getSingleton('checkout/session')->addException($e,
                        Mage::helper('checkout')->__('Cannot add the item to shopping cart.')
                    );
                }
            }
        }

        $cart->save();       
    }
}
